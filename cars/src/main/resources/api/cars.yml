openapi: 3.1.1
info:
  title: Cars
  description: |
    ### This is a microservice for managing cars inside rental
  termsOfService: https://example.com/terms
  contact:
    name: API Support Team
    url: https://example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: 'https://example.com/v1'    # an url to the target host
    description: Production server   # optional string describing the host
  - url: 'https://localhost:8080'    # an url to the target host
    description: Mock Server  # optional string describing the host
  - url: 'https://{server}.com:{port}/{version}'
    description: Development server
    variables:
      server:
        default: "dev.example"
      port:
        enum:
          - "8100"
          - "8200"
        default: "8100"
      version:
        default: v1
paths:
  /api/v1/cars:
    get:
      summary: Lists all cars
      description: |
        Returns the list of all cars from database
      tags:
        - Cars
      parameters:
        - name: brand
          in: query
          schema:
            type: string
            minLength: 2
            maxLength: 20
          example: "Chevrolet"
        - name: id
          in: query
          schema:
            type: integer
            minimum: 100
            maximum: 9999999999999
          example: 100
      responses:
        200:
          description: List of cars
          content:
            application/json:
              schema:
                type: object
                properties:
                  cars:
                    type: array
                    items:
                      $ref: "#/components/schemas/Car"

    post:
      description: Creates a new car
      summary: Creates a new car
      tags:
        - Cars
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"

      responses:
        201:
          description: Created car
          content:
            application/json:
              schema:
                schema:
                  $ref: "#/components/schemas/Car"

  /api/v1/cars/{id}:
    get:
      summary: Car by ID
      description: Returns car with given id if exists in DB
      tags:
        - Cars
      parameters:
        - $ref: "#/components/parameters/carIdParam"
      responses:
        200:
          description: Car by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    examples:
                      - "NOT_FOUND"
                  message:
                    type: string
                    examples:
                      - "Car not found"

components:
  schemas:
    Car:
      type: object
      properties:
        id:
          type: integer
          examples:
            - 100
        brand:
          type: string
          examples:
            - "Chevrolet"
        model:
          type: string
          examples:
            - "Corvette"
  parameters:
    carIdParam:
      name: id
      in: path
      required: true
      schema:
        type: integer
      example: 205